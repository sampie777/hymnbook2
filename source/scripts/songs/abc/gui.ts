import { AbcConfig } from "../../../components/melody/config";
import { VoiceItemNote } from "./abcjsTypes";

export namespace AbcGui {
  // Maps for Roboto font, see https://chrishewett.com/blog/calculating-text-width-programmatically/?
  const letterMapSingle = new Map([[" ", 31.783], ["!", 40.183], ["\"", 46], ["#", 83.783], ["$", 63.617], ["%", 95.017], ["&", 89.017], ["'", 27.483], ["(", 39.017], [")", 39.017], ["*", 50], ["+", 83.783], [",", 31.783], ["-", 33.783], [".", 31.783], ["/", 33.683], ["0", 63.617], ["1", 63.617], ["2", 63.617], ["3", 63.617], ["4", 63.617], ["5", 63.617], ["6", 63.617], ["7", 63.617], ["8", 63.617], ["9", 63.617], [":", 33.683], [";", 33.683], ["<", 83.783], ["=", 83.783], [">", 83.783], ["?", 53.617], ["@", 100], ["A", 72.217], ["B", 73.483], ["C", 76.517], ["D", 80.183], ["E", 73], ["F", 69.383], ["G", 79.883], ["H", 87.2], ["I", 39.5], ["J", 40.083], ["K", 74.7], ["L", 66.4], ["M", 102.4], ["N", 87.5], ["O", 81.983], ["P", 67.283], ["Q", 81.983], ["R", 75.3], ["S", 68.5], ["T", 66.7], ["U", 84.283], ["V", 72.217], ["W", 102.783], ["X", 71.183], ["Y", 66.017], ["Z", 69.483], ["[", 39.017], ["\\", 33.683], ["]", 39.017], ["^", 83.783], ["_", 50], ["`", 50], ["a", 59.617], ["b", 64.017], ["c", 56], ["d", 64.017], ["e", 59.183], ["f", 37.017], ["g", 64.017], ["h", 64.4], ["i", 31.983], ["j", 31], ["k", 60.6], ["l", 31.983], ["m", 94.817], ["n", 64.4], ["o", 60.2], ["p", 64.017], ["q", 64.017], ["r", 47.8], ["s", 51.317], ["t", 40.183], ["u", 64.4], ["v", 56.5], ["w", 85.6], ["x", 56.4], ["y", 56.5], ["z", 52.683], ["{", 63.617], ["|", 33.683], ["}", 63.617], ["~", 83.783], ["_median", 63.617]]);

  const letterMapKern = new Map([["-T", -3.566], ["-V", -7.267], ["-W", -5.466], ["-X", -3.566], ["-Y", -10.983], ["AT", -5.467], ["AV", -4.984], ["AW", -4.05], ["AY", -4.051], ["Af", -1.751], ["At", -1.75], ["Av", -4.05], ["Aw", -4.5], ["Ay", -4.05], ["B-", 1.867], ["BC", 1.867], ["BG", 1.867], ["BO", 1.867], ["BY", -1.75], ["C,", -3.567], ["C.", -3.567], ["D,", -3.566], ["D-", 1.851], ["D.", -3.566], ["DV", -1.767], ["E-", 1.85], ["F,", -15.566], ["F-", -4.483], ["F.", -15.566], ["F:", -3.566], ["F;", -3.566], ["FA", -8.683], ["Fa", -6.783], ["Fe", -5.466], ["Fo", -5.466], ["G,", -3.566], ["G-", 1.851], ["G.", -3.566], ["GY", -1.75], ["J,", -5.849], ["J.", -7.766], ["J:", -4.049], ["J;", -4.049], ["K-", -7.266], ["KA", -4.05], ["KC", -2.684], ["KO", -2.683], ["KU", -3.55], ["KW", -3.55], ["KY", -2.684], ["Ke", -2.683], ["Ko", -2.683], ["Ku", -2.183], ["Ky", -6.383], ["LT", -8.15], ["LU", -5.466], ["LV", -11.867], ["LW", -8.683], ["LY", -6.384], ["Ly", -1.75], ["N,", -6.4], ["N.", -6.4], ["N:", -3.566], ["N;", -3.566], ["O,", -5.866], ["O-", 3.667], ["O.", -5.866], ["OV", -1.767], ["OX", -1.766], ["P,", -20.266], ["P-", -5.466], ["P.", -20.266], ["P:", -3.566], ["P;", -3.566], ["PA", -9.183], ["PU", -1.749], ["Pa", -4.483], ["Pe", -4.483], ["Po", -4.05], ["Ps", -2.683], ["Q,", -4.983], ["Q-", 3.667], ["Q.", -4.983], ["RT", -1.767], ["RV", -3.567], ["RW", -2.2], ["RY", -3.084], ["Ra", 2.283], ["Ry", -1.767], ["S,", -3.566], ["S-", 3.667], ["S.", -3.566], ["SS", -1.75], ["T,", -14.7], ["T-", -12.883], ["T.", -14.7], ["T:", -3.566], ["T;", -3.566], ["TA", -5.467], ["TT", 1.85], ["Ta", -7.767], ["Tc", -7.767], ["Te", -7.766], ["To", -7.767], ["Ts", -7.284], ["Tw", -3.567], ["U,", -9.183], ["U-", -1.766], ["U.", -9.183], ["U:", -3.566], ["U;", -3.566], ["UA", -3.083], ["UJ", -2.683], ["V,", -17.483], ["V-", -9.183], ["V.", -17.483], ["V:", -10.067], ["V;", -10.067], ["VA", -6.784], ["VO", -1.75], ["Va", -9.184], ["Ve", -9.183], ["Vi", -1.75], ["Vo", -9.184], ["Vu", -6.4], ["Vy", -4.05], ["W,", -17.483], ["W-", -7.283], ["W.", -17.483], ["W:", -8.683], ["W;", -8.683], ["WA", -4.983], ["Wa", -8.683], ["We", -8.149], ["Wi", -1.749], ["Wo", -6.783], ["Wr", -4.5], ["Wu", -4.05], ["Wy", -2.2], ["X-", -3.549], ["XA", -3.55], ["XC", -1.75], ["XO", -1.749], ["Y,", -12.883], ["Y-", -10.983], ["Y.", -12.883], ["Y:", -12.35], ["Y;", -12.35], ["YA", -7.767], ["YC", -1.767], ["Ya", -7.767], ["Ye", -8.7], ["Yi", -1.767], ["Yo", -8.7], ["Yu", -8.7], ["Z,", -1.766], ["Z.", -1.766], ["f,", -3.567], ["f-", -3.567], ["f.", -3.567], ["ff", -2.984], ["fi", -2.3], ["fl", -2.3], ["k-", -1.766], ["o.", -1.75], ["r,", -10.983], ["r.", -10.983], ["v,", -11.866], ["v.", -11.866], ["w,", -11.866], ["w.", -11.866], ["x-", -1.766], ["y,", -13.283], ["y.", -13.283]]);

  export const calculateTextWidth = (text: string, textScale: number): number => {
    let letterWidth = 0;

    // split the string up using the spread operator (to handle UTF-8)
    const letterSplit = [...text];

    // go through each letter
    for (const [key, letter] of letterSplit.entries()) {
      // add on the width of this letter to the sum
      letterWidth += letterMapSingle.get(letter) || letterMapSingle.get("_median")!!;

      if (key !== letterSplit.length - 1) {
        // add/remove the kerning modifier of this letter and the next one
        letterWidth += letterMapKern.get(`${letter}${letterSplit[key + 1]}`) || 0;
      }
    }

    // Scaling factor
    letterWidth *= 0.21 * textScale;
    letterWidth += AbcConfig.textPadding;
    if (!text.endsWith("-")) {
      letterWidth += AbcConfig.textPadding;
    }

    return letterWidth;
  };

  export const calculateNoteWidth = (note: VoiceItemNote): number => {
    if (note.rest !== undefined && note.rest.type === "spacer") {
      return note.duration * 8 * AbcConfig.spacerWidth;
    }

    let result = AbcConfig.noteWidth + 2 * AbcConfig.notePadding;
    if (note.pitches?.some(it => it.accidental !== undefined)) {
      result += AbcConfig.accidentalWidth;
    }
    if (note.duration > 0.25) {
      result += note.duration * 8 * AbcConfig.noteWidth;
    }
    return result;
  };
}
