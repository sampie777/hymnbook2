import React, { useEffect, useState } from 'react';
import { Alert, SectionList, StyleSheet, Text, View } from 'react-native';
import { ThemeContextProps, useTheme, } from '../../../components/providers/ThemeProvider';
import { SongHistory } from '../../../../logic/db/models/songs/SongHistory';
import { SongHistorySchema } from '../../../../logic/db/models/songs/SongHistorySchema';
import { ParamList, SongHistoryRoute, SongRoute } from '../../../../navigation';
import Db from '../../../../logic/db/db';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { generateSongTitle, loadSongWithUuidOrId, } from '../../../../logic/songs/utils';
import { SearchResultItemBaseComponent } from '../search/SearchResultItemBaseComponent';

type SongHistoryGroupedItem = {
  songTitle: string;
  songUuid: string;
  bundleName: string;
  timestamp: Date;
};

type Section = {
  title: string;
  data: SongHistoryGroupedItem[];
};

const SongHistoryScreen: React.FC<
  NativeStackScreenProps<ParamList, typeof SongHistoryRoute>
> = ({ navigation }) => {
  const styles = createStyles(useTheme());
  const [groupedItems, setGroupedItems] = useState<Section[]>([]);

  // Mostly generated by CoPilot
  useEffect(() => {
    const songHistoryEntries = Db.songs
      .realm()
      .objects<SongHistory>(SongHistorySchema.name)
      .sorted('timestamp', true);

    // Step 1: Group by song
    const groupedBySong = songHistoryEntries.reduce(
      (acc: SongHistory[][], item: SongHistory) => {
        if (acc.length == 0) acc.push([]);
        if (
          acc[acc.length - 1].length > 0 &&
          acc[acc.length - 1][0].songUuid != item.songUuid
        ) {
          acc.push([]);
        }
        acc[acc.length - 1].push(item);
        return acc;
      },
      [],
    );

    // Step 2: Generate song titles
    const songItems = Object.values(groupedBySong).map(items => {
      items.sort((a, b) => a.verseIndex - b.verseIndex);
      const uniqueVerseNames = new Set<string>(items.map(it => it.verseName));
      const songTitle = generateSongTitle(
        { name: items[0].songName, verses: [] },
        Array.from(uniqueVerseNames.values()).map(it => ({ name: it })),
      );
      return {
        songTitle,
        songUuid: items[0].songUuid,
        bundleName: items[0].bundleName,
        timestamp: items[0].timestamp,
      };
    });

    // Step 3: Group by time periods
    const now = new Date();
    const groupedByTime = songItems.reduce((acc: Section[], item) => {
      const itemDate = new Date(item.timestamp);
      let title = '';

      const lastWeekDate = new Date(now);
      lastWeekDate.setDate(now.getDate() - 7);
      lastWeekDate.setHours(0);
      lastWeekDate.setMinutes(0);
      const lastMonthDate = new Date();
      lastMonthDate.setMonth(now.getMonth() - 1);
      lastMonthDate.setHours(0);
      lastMonthDate.setMinutes(0);

      if (itemDate.toDateString() === now.toDateString()) {
        title = 'Today';
      } else if (itemDate > lastWeekDate) {
        title = 'In the last week';
      } else if (itemDate > lastMonthDate) {
        title = 'In the last month';
      } else {
        title = 'Older';
      }

      const lastGroup = acc[acc.length - 1];
      if (lastGroup && lastGroup.title === title) {
        lastGroup.data.push(item);
      } else {
        acc.push({
          title: title,
          data: [item],
        });
      }

      return acc;
    }, []);

    groupedByTime.forEach(it => {
      it.title += ` (${it.data.length})`;
    });

    setGroupedItems(groupedByTime);
  }, []);

  const navigateToSong = (uuid: string) => {
    // First check if song exists in the database
    const song = loadSongWithUuidOrId(uuid);
    if (song == undefined) {
      Alert.alert(
        'Not found',
        "This song isn't available. Have you download the corresponding song bundle? Or maybe it has been deleted.",
      );
      return;
    }

    navigation.navigate(SongRoute, { uuid: uuid });
  };

  const renderItem = ({ item }: { item: SongHistoryGroupedItem }) => (
    <SearchResultItemBaseComponent
      songName={item.songTitle}
      bundleName={item.bundleName}
      onItemPress={() => navigateToSong(item.songUuid)}
      fontScale={0.8}
    />
  );

  const renderSectionHeader = ({ section }: { section: Section }) => (
    <View style={styles.headerContainer}>
      <Text style={styles.headerText}>{section.title}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <SectionList
        sections={groupedItems}
        renderItem={({ item }) => renderItem({ item })}
        renderSectionHeader={renderSectionHeader}
        keyExtractor={item => item.timestamp.toString()}
      />
    </View>
  );
};

export default SongHistoryScreen;

const createStyles = ({ colors, fontFamily }: ThemeContextProps) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    headerContainer: {
      padding: 10,
      marginTop: 50,
      backgroundColor: colors.background,
    },
    headerText: {
      fontSize: 20,
      color: colors.text.default,
      fontFamily: fontFamily.sansSerif,
      textAlign: 'center',
    },
  });
